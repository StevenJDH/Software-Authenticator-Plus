/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Forms;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import javax.imageio.ImageIO;
import Classes.GoogleTOTP;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import javax.swing.BorderFactory;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;

/**
 *
 * @author Steven Jenkins De Haro
 */
public class Creation extends java.awt.Dialog {
    BufferedImage bi; //Used for saving and loading of the QRCode image.
    /**
     * Creates new form Creation
     */
    public Creation(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        btnSaveQRCode = new javax.swing.JButton();
        btnGenerate = new javax.swing.JButton();
        lblQRCode = new javax.swing.JLabel();
        lblPrivateKey = new javax.swing.JLabel();
        lblUserID = new javax.swing.JLabel();
        txtHost = new javax.swing.JTextField();
        lblHost = new javax.swing.JLabel();
        txtUserID = new javax.swing.JTextField();
        btnVerify = new javax.swing.JButton();
        txtPrivateKey = new javax.swing.JTextField();
        btnRetry = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        lblSubTitle = new javax.swing.JLabel();
        btnClose = new javax.swing.JButton();

        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(240, 240, 240));
        setForeground(java.awt.Color.black);
        setLocationRelativeTo(null);
        setModal(true);
        setResizable(false);
        setTitle("2FA Private Key Generator");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jLayeredPane1.setBackground(new java.awt.Color(51, 51, 51));
        jLayeredPane1.setMaximumSize(new java.awt.Dimension(613, 251));
        jLayeredPane1.setMinimumSize(new java.awt.Dimension(613, 251));
        jLayeredPane1.setOpaque(true);

        btnSaveQRCode.setText("Save QRCode");
        btnSaveQRCode.setToolTipText("Saves the QR code as a png image file.");
        btnSaveQRCode.setEnabled(false);
        btnSaveQRCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveQRCodeActionPerformed(evt);
            }
        });
        btnSaveQRCode.setBounds(480, 220, 120, 23);
        jLayeredPane1.add(btnSaveQRCode, javax.swing.JLayeredPane.DEFAULT_LAYER);

        btnGenerate.setText("Generate Key");
        btnGenerate.setToolTipText("Generates the new private key and copies it to the clipboard.");
        btnGenerate.setEnabled(false);
        btnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateActionPerformed(evt);
            }
        });
        btnGenerate.setBounds(260, 220, 120, 23);
        jLayeredPane1.add(btnGenerate, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lblQRCode.setBackground(new java.awt.Color(153, 153, 153));
        lblQRCode.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblQRCode.setText("QR Code");
        lblQRCode.setToolTipText("Use this QR code to configure your smartphones easily.");
        lblQRCode.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblQRCode.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblQRCode.setOpaque(true);
        lblQRCode.setBounds(400, 10, 200, 200);
        jLayeredPane1.add(lblQRCode, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lblPrivateKey.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblPrivateKey.setForeground(new java.awt.Color(255, 255, 255));
        lblPrivateKey.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPrivateKey.setText("Private Key:");
        lblPrivateKey.setBounds(4, 190, 100, 17);
        jLayeredPane1.add(lblPrivateKey, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lblUserID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblUserID.setForeground(new java.awt.Color(255, 255, 255));
        lblUserID.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblUserID.setText("User ID:");
        lblUserID.setBounds(4, 110, 100, 17);
        jLayeredPane1.add(lblUserID, javax.swing.JLayeredPane.DEFAULT_LAYER);

        txtHost.setBackground(new java.awt.Color(0, 0, 0));
        txtHost.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtHost.setForeground(new java.awt.Color(255, 255, 255));
        txtHost.setToolTipText("example.com");
        txtHost.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 255), 1, true));
        txtHost.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtHostKeyReleased(evt);
            }
        });
        txtHost.setBounds(110, 150, 270, 19);
        jLayeredPane1.add(txtHost, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lblHost.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblHost.setForeground(new java.awt.Color(255, 255, 255));
        lblHost.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblHost.setText("Host/System:");
        lblHost.setBounds(4, 150, 100, 17);
        jLayeredPane1.add(lblHost, javax.swing.JLayeredPane.DEFAULT_LAYER);

        txtUserID.setBackground(new java.awt.Color(0, 0, 0));
        txtUserID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtUserID.setForeground(new java.awt.Color(255, 255, 255));
        txtUserID.setToolTipText("johndoe");
        txtUserID.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 255), 1, true));
        txtUserID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtUserIDKeyReleased(evt);
            }
        });
        txtUserID.setBounds(110, 110, 270, 19);
        jLayeredPane1.add(txtUserID, javax.swing.JLayeredPane.DEFAULT_LAYER);

        btnVerify.setText("Verify");
        btnVerify.setToolTipText("Verifies if the private key is valid using a generated test pin.");
        btnVerify.setEnabled(false);
        btnVerify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerifyActionPerformed(evt);
            }
        });
        btnVerify.setBounds(181, 220, 70, 23);
        jLayeredPane1.add(btnVerify, javax.swing.JLayeredPane.DEFAULT_LAYER);

        txtPrivateKey.setEditable(false);
        txtPrivateKey.setBackground(new java.awt.Color(0, 0, 0));
        txtPrivateKey.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtPrivateKey.setForeground(new java.awt.Color(153, 180, 255));
        txtPrivateKey.setToolTipText("The private key is used as the seed to generate the pins.");
        txtPrivateKey.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 204, 204), 1, true));
        txtPrivateKey.setBounds(110, 190, 270, 19);
        jLayeredPane1.add(txtPrivateKey, javax.swing.JLayeredPane.DEFAULT_LAYER);

        btnRetry.setText("Retry");
        btnRetry.setToolTipText("Tries again to create and display the private key QR code.");
        btnRetry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRetryActionPerformed(evt);
            }
        });
        btnRetry.setVisible(false);
        btnRetry.setBounds(400, 220, 70, 23);
        jLayeredPane1.add(btnRetry, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(153, 153, 255));
        lblTitle.setText("2FA Private Key Generator for TOTP");
        lblTitle.setBounds(13, 5, 370, 30);
        jLayeredPane1.add(lblTitle, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lblSubTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblSubTitle.setText("<html><font size=\"2\">This tool is a Two-factor Authentication (2FA) private key generator which <br>\nimplements the TOTP algorithm (specified in RFC 6238) for your server. You <br>\ncan use this software or other compatible software like Google Authenticator <br>\nto generate the Pins. Use the QRCode to configure smartphones faster.</font></html>");
        lblSubTitle.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lblSubTitle.setBounds(13, 40, 390, 60);
        jLayeredPane1.add(lblSubTitle, javax.swing.JLayeredPane.DEFAULT_LAYER);

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        btnClose.setBounds(10, 220, 90, 23);
        jLayeredPane1.add(btnClose, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 613, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        closeDialog(null);
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnRetryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRetryActionPerformed
        try {
            URL url  = new URL(GoogleTOTP.getQRBarcodeURL(txtUserID.getText(), txtHost.getText(), txtPrivateKey.getText()));
            bi = ImageIO.read(url);
            Image image = bi;
            lblQRCode.setText("");
            lblQRCode.setIcon(new javax.swing.ImageIcon(image));
            btnSaveQRCode.setEnabled(true);
            btnRetry.setVisible(false);
        }catch (IOException  ex) {
            lblQRCode.setText("<html><center>Error Creating QR Code<br>(No Internet Connection)</center><html>");
        }
    }//GEN-LAST:event_btnRetryActionPerformed

    private void btnVerifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerifyActionPerformed
        GoogleTOTP ga = new GoogleTOTP();
        //We auto enter the code that would be shown on device before the code expires!
        long code = Long.parseLong(Main.computePin(txtPrivateKey.getText())) ;
        long t = System.currentTimeMillis();

        ga.setWindowSize(5); //should give 5 * 30 seconds of grace...

        if (ga.check_code(txtPrivateKey.getText(),code, t)== true) {
            JOptionPane.showMessageDialog(this, "Verification was successful.", "Software Authenticator Plus", JOptionPane.INFORMATION_MESSAGE);
        }else {
            JOptionPane.showMessageDialog(this, "Verification failed. Make sure the system time is correct.", "Software Authenticator Plus", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnVerifyActionPerformed

    private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateActionPerformed
        txtPrivateKey.setText(GoogleTOTP.generateSecretKey());
        btnVerify.setEnabled(true);
        //Copies to clipboard automatically.
        StringSelection data = new StringSelection(txtPrivateKey.getText());
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(data, data);
        try {
            URL url  = new URL(GoogleTOTP.getQRBarcodeURL(txtUserID.getText(), txtHost.getText(), txtPrivateKey.getText()));
            bi = ImageIO.read(url);
            Image image = bi;
            lblQRCode.setText("");
            lblQRCode.setIcon(new javax.swing.ImageIcon(image));
            btnSaveQRCode.setEnabled(true);
        }catch (IOException  ex) {
            lblQRCode.setText("<html><center>Error Creating QR Code<br>(No Internet Connection)</center><html>");
            btnRetry.setVisible(true);
        }
    }//GEN-LAST:event_btnGenerateActionPerformed

    private void btnSaveQRCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveQRCodeActionPerformed
        try {
            JFileChooser fc = new JFileChooser(System.getProperty("user.home") + "/Desktop"); //This should work on windows/Linux/Mac
            fc.setSelectedFile(new File(txtPrivateKey.getText() + ".png"));
            fc.setFileFilter(new FileNameExtensionFilter("PNG files (*.png)", "png"));
            int returnVal = fc.showSaveDialog(this);
            if (returnVal == JOptionPane.OK_OPTION){
                File file = fc.getSelectedFile();
                file = FixedFile(file.getParent(), file.getName(), fc.getFileFilter().getDescription());
                if(file.exists() == true){
                    int result = JOptionPane.showConfirmDialog(this, file.getName() + " already exists.\nDo you want to replace it?", "Software Authenticator Plus", JOptionPane.YES_NO_CANCEL_OPTION );
                    switch(result){
                        case JOptionPane.YES_OPTION:
                            ImageIO.write(bi, "png", file); //TODO: ImageIO is throwing access denied error (FileNotFoundException) but its being ignored and not caught below.
                            break;
                        case JOptionPane.NO_OPTION:
                            btnSaveQRCode.doClick(); //allows user to select a different file name so it doesn't overwrite a file.
                        case JOptionPane.CANCEL_OPTION:
                        default:
                    }
                }else{ //if it doesn't exist then continue like normal.
                    ImageIO.write(bi, "png", file); //TODO: ImageIO is throwing access denied error (FileNotFoundException) but its being ignored and not caught below.
                }
            }
        }catch (IOException ioex){
            JOptionPane.showMessageDialog(this, "Error: " + ioex.getMessage(), "Software Authenticator Plus", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveQRCodeActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
       /**
        * The UI is setting its own border on the text field overriding the margin you set. You can see a warning to this effect in the javadoc serMargin().
        * The solution is to let the UI set a border then squeeze another border of your own. The below adds some padding on the left and right of the field
        * so its not touch the edges so much.
        */
        txtUserID.setBorder(BorderFactory.createCompoundBorder(txtUserID.getBorder(), BorderFactory.createEmptyBorder(0, 5, 0, 5)));
        txtHost.setBorder(BorderFactory.createCompoundBorder(txtHost.getBorder(), BorderFactory.createEmptyBorder(0, 5, 0, 5)));
        txtPrivateKey.setBorder(BorderFactory.createCompoundBorder(txtPrivateKey.getBorder(), BorderFactory.createEmptyBorder(0, 5, 0, 5)));
        txtUserID.setDocument(new PlainDocument(){
            @Override //Text limit of 20
            public void insertString(int offs, String str, AttributeSet a) throws BadLocationException {
                if(getLength() + str.length() <= 20 && str.matches("[a-zA-Z0-9_.]+") == true) {
                    super.insertString(offs, str, a);                    
                }               
            }
        });
        txtHost.setDocument(new PlainDocument(){
            @Override //Text limit of 30
            public void insertString(int offs, String str, AttributeSet a) throws BadLocationException {
                if(getLength() + str.length() <= 30 && str.matches("[a-zA-Z0-9_.]+") == true)
                    super.insertString(offs, str, a);
            }
        });
    }//GEN-LAST:event_formWindowOpened

    private void txtUserIDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUserIDKeyReleased
        btnGenerate.setEnabled((
            !txtUserID.getText().isEmpty() && !txtHost.getText().isEmpty()
        ));
    }//GEN-LAST:event_txtUserIDKeyReleased

    private void txtHostKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHostKeyReleased
        btnGenerate.setEnabled((
            !txtUserID.getText().isEmpty() && !txtHost.getText().isEmpty()
        ));
    }//GEN-LAST:event_txtHostKeyReleased

    //This code below is needed so that the save code will be able to see if the file exits and auto add an extention:
    private File FixedFile(String Dir, String Filename, String SelectedFilter)
    {
        String FilenameWithExtension;
        String nFixedPath;
        if(!Filename.toUpperCase().endsWith(".PNG") && "PNG files (*.png)".equals(SelectedFilter)) {
            FilenameWithExtension = Filename + ".png";
        }else {
            FilenameWithExtension = Filename;
        }       
        //This should work on windows/Linux/Mac
        if(Dir.endsWith("/") || Dir.endsWith("\\")) {
            nFixedPath = Dir;
        }else {
            nFixedPath = Dir + "/";
        }
        return new File(nFixedPath + FilenameWithExtension);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                Creation dialog = new Creation(new java.awt.Frame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnGenerate;
    private javax.swing.JButton btnRetry;
    private javax.swing.JButton btnSaveQRCode;
    private javax.swing.JButton btnVerify;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLabel lblHost;
    private javax.swing.JLabel lblPrivateKey;
    private javax.swing.JLabel lblQRCode;
    private javax.swing.JLabel lblSubTitle;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblUserID;
    private javax.swing.JTextField txtHost;
    private javax.swing.JTextField txtPrivateKey;
    private javax.swing.JTextField txtUserID;
    // End of variables declaration//GEN-END:variables
}
