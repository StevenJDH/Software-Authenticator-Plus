/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Forms;

//Used for loading the custom font
import java.awt.Font;
import java.awt.FontFormatException;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
import javax.swing.JOptionPane;

import Classes.AES;
import Classes.PasscodeGenerator;
import Classes.Base32String;
import Classes.OSXAdapter;
import java.awt.Color;
import java.awt.Desktop;
import java.security.GeneralSecurityException;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Timer;
import java.util.TimerTask;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.File;
import java.net.URI;
import java.net.URISyntaxException;
import javax.swing.ImageIcon;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;




/**
 *
 * @author Steven Jenkins De Haro
 */
public class Main extends javax.swing.JFrame {
    
    String mySecretKey = ""; //Stores the secret key in a global varibale.
    /** This is responsible for generating the pin code ever x seconds */
    private Timer timer = new Timer();
    File myProfilePath;
    TimedPin myTimedPin;

    
    /**
     * Creates new form Main
     */
    public Main() {
        super("OSXAdapter");
        initComponents();
    }
   /**
   * Generate and register the OSXAdapter, passing it a hash of all the methods we wish to
   * use as delegates for various com.apple.eawt.ApplicationListener methods.
   * Also is an entry that sets the 256x256 dock icon.
   */
   public void registerForMacOSXEvents() {
       if (System.getProperty("os.name").contains("OS X")) {
           try {
               OSXAdapter.setQuitHandler(this, getClass().getDeclaredMethod("quit", (Class[])null));
               OSXAdapter.setAboutHandler(this, getClass().getDeclaredMethod("about", (Class[])null));
               //Sets the dock icon
               ImageIcon icon = new ImageIcon(Main.class.getResource("/Images/Icon-Dock.png"));
               OSXAdapter.setDockIcon(icon);
               //Comment preference out and its method its points to below to have this menu hidden.
               //OSXAdapter.setPreferencesHandler(this, getClass().getDeclaredMethod("preferences", (Class[])null));
           }catch (NoSuchMethodException | SecurityException e) {
               JOptionPane.showMessageDialog(this, "Error while loading the OSXAdapter: " + e.getMessage(), "Software Authenticator Plus", JOptionPane.ERROR_MESSAGE);
           }
       }
   }
    /**
    * General info dialog; fed to the OSXAdapter as the method to call when 
    * "About OSXAdapter" is selected from the application menu
    */
    public void about() {
        mnuAbout.doClick();
    }
    /**
    * General preferences dialog; fed to the OSXAdapter as the method to call when 
    * "Preferences..." is selected from the application menu
    */
    //public void preferences() {}
    /**
    * General quit handler; fed to the OSXAdapter as the method to call when a system quit event occurs
    * A quit event is triggered by Cmd-Q, selecting Quit from the application or Dock menu, or logging out
    */
    public void quit() { 
        mnuExit.doClick();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        lblLCD = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mnuConfigKey = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mnuExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        mnuCopy = new javax.swing.JMenuItem();
        mnuTools = new javax.swing.JMenu();
        mnuCreation = new javax.swing.JMenuItem();
        mnuHelp = new javax.swing.JMenu();
        mnuDonate = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        mnuAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Software Authenticator Plus");
        setAlwaysOnTop(true);
        setIconImage(Toolkit.getDefaultToolkit().getImage(Main.class.getResource("/Images/Icon-mini.png")));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        lblLCD.setFont(new java.awt.Font("Tahoma", 0, 65)); // NOI18N
        lblLCD.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLCD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/LCD.png"))); // NOI18N
        lblLCD.setToolTipText("Double-click the pin to copy it to the clipboard.");
        lblLCD.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblLCD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblLCDMouseClicked(evt);
            }
        });
        lblLCD.setBounds(0, 0, 413, 145);
        jLayeredPane1.add(lblLCD, javax.swing.JLayeredPane.DEFAULT_LAYER);
        //We load here because it will apply the code more quickly.
        try {
            InputStream myFont = this.getClass().getResourceAsStream("/Fonts/digital.ttf");
            Font digitalFont = Font.createFont(Font.TRUETYPE_FONT, myFont).deriveFont(75f); //We set again the size because it defaults to 1.
            lblLCD.setFont(digitalFont);
        }catch (IOException|FontFormatException ex) {
            System.out.println("Error while loading font data.");
            lblLCD.setFont(new Font("Tahoma", Font.PLAIN, 65));
        }

        mnuFile.setText("File");

        mnuConfigKey.setText("Configure Private Key");
        mnuConfigKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuConfigKeyActionPerformed(evt);
            }
        });
        mnuFile.add(mnuConfigKey);
        mnuFile.add(jSeparator1);

        mnuExit.setText("Exit");
        mnuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuExitActionPerformed(evt);
            }
        });
        mnuFile.add(mnuExit);

        jMenuBar1.add(mnuFile);

        jMenu2.setText("Edit");

        mnuCopy.setText("Copy Pin");
        mnuCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCopyActionPerformed(evt);
            }
        });
        jMenu2.add(mnuCopy);

        jMenuBar1.add(jMenu2);

        mnuTools.setText("Tools");

        mnuCreation.setText("2FA Private Key Generator");
        mnuCreation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCreationActionPerformed(evt);
            }
        });
        mnuTools.add(mnuCreation);

        jMenuBar1.add(mnuTools);

        mnuHelp.setText("Help");

        mnuDonate.setText("Donate 5â‚¬ (Paypal)...");
        mnuDonate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuDonateActionPerformed(evt);
            }
        });
        mnuHelp.add(mnuDonate);
        mnuHelp.add(jSeparator2);

        mnuAbout.setText("About");
        mnuAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAboutActionPerformed(evt);
            }
        });
        mnuHelp.add(mnuAbout);

        jMenuBar1.add(mnuHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        registerForMacOSXEvents(); //Registers the mac menu if on a mac only.
        //Gets the correct profile path where our settings will be stored.
        String systemName = System.getProperty("os.name").toLowerCase();
        if (systemName.contains("mac")) { 
            myProfilePath = new File(System.getProperty("user.home") + "/Library/Application Support/ASC-C/Software Authenticator Plus/");        
        } else if (systemName.contains("nix") || systemName.contains("nux")) { 
            myProfilePath = new File(System.getProperty("user.home") + "/.config/ASC-C/Software Authenticator Plus/");        
        } else if (systemName.contains("win")) { 
            myProfilePath = new File(System.getenv("APPDATA") + "/ASC-C/Software Authenticator Plus/");    
        }else {
            JOptionPane.showMessageDialog(this, "Error: There was an issue recognizing this operating system. The application will now close.", "Software Authenticator Plus", JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }
        Properties prop = new Properties(); 
        try
        {
            prop.load(new FileInputStream(myProfilePath.getPath() + "/sauthenticator.config"));
        }
        catch(IOException ex) { }
        try {
            /*
             * The second string is the default choice if the settings are damaged or its a first run. 
             *It return Null or Empty, but if it has valid data then we decrypt with AES 128. 
             * Finally we start the Pin generation process.
            */
            if (prop.getProperty("secretKey", "").trim().isEmpty() == false){
                mySecretKey = AES.decrypt(prop.getProperty("secretKey", ""));
                //This starts the Pin changing every 30 seconds.
                myTimedPin = new TimedPin(mySecretKey);
                timer.scheduleAtFixedRate(myTimedPin, 0, 1 * 1000);
            }else{
                mySecretKey = "";
                lblLCD.setText("Config");
            }     
        }catch(Exception ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Software Authenticator Plus", JOptionPane.ERROR_MESSAGE);
            mySecretKey = "";
        }  
    }//GEN-LAST:event_formWindowOpened

    private void mnuConfigKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuConfigKeyActionPerformed
        //Configure 32-bit secure private key only and save it. 16-bit not supported.
        String secretKey;
        if (System.getProperty("os.name").toLowerCase().contains("mac")) {
            secretKey = JOptionPane.showInputDialog(this,"Enter your 32-bit 'Secure Private Key' (use Cmd+V to paste):     ", "Configure Private Key", JOptionPane.QUESTION_MESSAGE);           
        }else { //For windows or linux
            secretKey = JOptionPane.showInputDialog(this,"Enter your 32-bit 'Secure Private Key' (use Ctrl+V to paste):     ", "Configure Private Key", JOptionPane.QUESTION_MESSAGE);       
        }
        //The if statement has to check in this order or it will throw and exception because trim and isEmpty crash on null.
        if ((secretKey == null) == false && secretKey.trim().isEmpty() == false){
            if (secretKey.matches("[A-Z0-9]+") == false){
                JOptionPane.showMessageDialog(this, "Invalid 32-bit key. There should only be uppercase characters and numbers.", "Software Authenticator Plus", JOptionPane.WARNING_MESSAGE);
                return;
            }
            mySecretKey = secretKey;
            //This starts the Pin changing every 30 seconds and cancels a previous one if present.
            if (lblLCD.getText().matches("[0-9]+") == true){
                myTimedPin.cancel();}           
            myTimedPin = new TimedPin(mySecretKey);
            timer.scheduleAtFixedRate(myTimedPin, 0, 1 * 1000);
            // Create our profile directory. All non-existent ancestor directories are automatically created.
            if (myProfilePath.exists() == false) {    
                boolean result = (myProfilePath).mkdirs();
                if (result == false) {
                    JOptionPane.showMessageDialog(this, "Error: There was an issue while saving your private key. You may continue, but changes will not be saved.", "Software Authenticator Plus", JOptionPane.ERROR_MESSAGE);
                    return;
                } 
            }    
            Properties prop = new Properties();    
            try
            {
                prop.setProperty("secretKey", AES.encrypt(secretKey));
                prop.store(new FileOutputStream(myProfilePath + "/sauthenticator.config"), null);
            }
            catch(Exception ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Software Authenticator Plus", JOptionPane.ERROR_MESSAGE); 
            }
        }    
    }//GEN-LAST:event_mnuConfigKeyActionPerformed

    private void mnuCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCopyActionPerformed
        String thePin = lblLCD.getText();
        if (thePin.matches("[0-9]+") == true){
            StringSelection data = new StringSelection(thePin);
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(data, data);
        }  
    }//GEN-LAST:event_mnuCopyActionPerformed

    private void mnuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_mnuExitActionPerformed

    private void mnuAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAboutActionPerformed
        JOptionPane.showMessageDialog(this, "Software Authenticator Plus 1.0 (19/05/2013)\n\n"
            + "Author: Steven Jenkins De Haro\n"
            + "A Steve Creation/Convergence\n\n"
            + "Java 1.7 JDK", "Software Authenticator Plus", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_mnuAboutActionPerformed

    private void mnuDonateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuDonateActionPerformed
        //Works for windows and also for mac it seems but for linux it copies the link to the clipboard.
        //For linux it also depends on the desktop used. KDE won't work, but maybe gnome will.
        if(!Desktop.isDesktopSupported())
        {
            StringSelection data = new StringSelection("https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=8493677");
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(data, data);
            JOptionPane.showMessageDialog(this, "This desktop doesn't seem to be supported so the donation link has been copied to your clipboard.\nIn the address bar of any broswer, click Ctrl+V on the keyboard then hit the Enter button to donate.", "Software Authenticator Plus", JOptionPane.INFORMATION_MESSAGE);
        }else {
            try
            {
                Desktop desktop = Desktop.getDesktop();
                URI uri = new URI("https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=8493677");
                desktop.browse(uri);
            }
            catch(URISyntaxException | IOException e)
            {
                JOptionPane.showMessageDialog(this, "Error: Cannot open your default browser.", "Software Authenticator Plus", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_mnuDonateActionPerformed

    private void mnuCreationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCreationActionPerformed
        Creation nFrame = new Creation(this, true);
        nFrame.setLocation(this.getLocation().x + ((this.getWidth() - nFrame.getWidth()) / 2), this.getLocation().y + (this.getHeight() - nFrame.getHeight()) / 2);
        nFrame.setVisible(true);
    }//GEN-LAST:event_mnuCreationActionPerformed

    private void lblLCDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLCDMouseClicked
        if (evt.getClickCount() == 2 && !evt.isConsumed()) {
            evt.consume();
            mnuCopy.doClick();
            java.awt.Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_lblLCDMouseClicked

  class TimedPin extends TimerTask 
   {
        private String secret;    
        String previousPin = ""; //This is here to remove a yellow warning below about it not being uses when it is.
        
        public TimedPin (String secret)
        {
            this.secret = secret;
            lblLCD.setText(computePin(secret));
        }
        @Override
        public void run() 
        {
            String newPin = computePin(secret); //Calculates the new pin and outputs it to a variable.
            //Changes the Pin's color in the 30 second time frame. Last 10 is orange and last 5 is red, the rest is black.
            Calendar calendar = new GregorianCalendar(); //This had to be here and called each time to get the current seconds.
            int colorSeconds = calendar.get(Calendar.SECOND);
            if (colorSeconds  >= 0 && colorSeconds <= 19 ){
                lblLCD.setForeground(Color.black);
            }else if (colorSeconds  >= 20 && colorSeconds <= 24 ){
                lblLCD.setForeground(Color.decode("#FB8200")); //Dark orange
            }else if (colorSeconds  >= 25 && colorSeconds <= 29 ){
                lblLCD.setForeground(Color.decode("#E40000")); //Dark red
            }else if (colorSeconds  >= 30 && colorSeconds <= 49 ){
                lblLCD.setForeground(Color.black);
            }else if (colorSeconds  >= 50 && colorSeconds <= 54 ){
                lblLCD.setForeground(Color.decode("#FB8200")); //Dark orange
            }else if (colorSeconds  >= 55 && colorSeconds <= 59 ){
                lblLCD.setForeground(Color.decode("#E40000")); //Dark red
            }
            //If we now actually have a new pin then output it.
            if(previousPin.equals(newPin) == false){
               lblLCD.setText(newPin);
               previousPin = newPin;
            }
        }
  } 
  
  public static String computePin(String secret) 
  {
        if (secret == null || secret.length() == 0) {
            return "Error!"; //Null or empty secret
        }
        try {
            final byte[] keyBytes = Base32String.decode(secret);
            Mac mac = Mac.getInstance("HMACSHA1");
            mac.init(new SecretKeySpec(keyBytes, ""));
            PasscodeGenerator pcg = new PasscodeGenerator(mac);
            return pcg.generateTimeoutCode();
        } catch (GeneralSecurityException e) {
            return "Error!"; //General security exception
        } catch (Base32String.DecodingException e) {
            return "Error!"; //Decoding exception usually if its not a 32-bit string entered as the secret.
        }
  }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {   
                /*
                 * Checks to see if running under Mac OS X and if so uses the menu bar for its' menu, adds the application name, and adjusts the look and feel.
                 */
                if (System.getProperty("os.name").contains("OS X")) {
                    // take the menu bar off the jframe
                    System.setProperty("apple.laf.useScreenMenuBar", "true");
                    // set the name of the application menu title. Maybe not work anymore, try the command -Xdock:name="S.Authenticator+"
                    System.setProperty("com.apple.mrj.application.apple.menu.about.name", "S.Authenticator+"); //Must be no longer than 16 characters.               
                    try
                    {
                        // set the look and feel
                        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());   //UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");   
                    }catch(ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e){}
                }
                new Main().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JLabel lblLCD;
    private javax.swing.JMenuItem mnuAbout;
    private javax.swing.JMenuItem mnuConfigKey;
    private javax.swing.JMenuItem mnuCopy;
    private javax.swing.JMenuItem mnuCreation;
    private javax.swing.JMenuItem mnuDonate;
    private javax.swing.JMenuItem mnuExit;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenu mnuHelp;
    private javax.swing.JMenu mnuTools;
    // End of variables declaration//GEN-END:variables
}
